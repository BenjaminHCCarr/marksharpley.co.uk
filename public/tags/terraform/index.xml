<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on Welcome to my site</title>
    <link>/tags/terraform/</link>
    <description>Recent content in Terraform on Welcome to my site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 23 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Free Functions as a service</title>
      <link>/posts/free-functions/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/free-functions/</guid>
      <description>Intro Five minutes (almost!) to always free functions as a service courtesy of Oracle Cloud The full source code for this project is here.
Why do this? All the major cloud providers offer some level of free service, however Oracle cloud is the only one offering this much compute free forever.
Yeah but why Oracle? Okay you got me. I got sucked into their free tier. Plus I like the way they describe instances sizes/flavours as shapes.</description>
    </item>
    
    <item>
      <title>LXC, Proxmox and Terraform</title>
      <link>/posts/proxmox-terraform/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/proxmox-terraform/</guid>
      <description>Quick post with an example of using Terraform to create LXC containers on Proxmox.
There are a few proxmox providers out there in the wilds, I chose to use the one by telmate:
terraform { required_providers { proxmox = { source = &amp;#34;Telmate/proxmox&amp;#34; version = &amp;#34;2.6.5&amp;#34; } } } Creating LXC Containers The Docs for this suck, here is a working snippet for version 2.6.5 of the provider:
resource &amp;#34;proxmox_lxc&amp;#34; &amp;#34;lxc-test&amp;#34; { hostname = &amp;#34;terraform-new-container&amp;#34; cores = 1 memory = &amp;#34;1024&amp;#34; swap = &amp;#34;2048&amp;#34; features { nesting = true } rootfs { storage = &amp;#34;local-lvm&amp;#34; size = &amp;#34;8G&amp;#34; } network { name = &amp;#34;eth0&amp;#34; bridge = &amp;#34;vmbr0&amp;#34; ip = &amp;#34;dhcp&amp;#34; ip6 = &amp;#34;dhcp&amp;#34; } ostemplate = &amp;#34;local:vztmpl/ubuntu-20.</description>
    </item>
    
    <item>
      <title>Rundeck and Terraform</title>
      <link>/posts/rundeck-api/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/rundeck-api/</guid>
      <description>Intro Rundeck is an opensource project; it allows you to turn scripts and playbooks into self service jobs. It has a full featured API but there isn&amp;rsquo;t much online about using it. This post will provide a few examples of using it to interact with Rundeck projects, their settings and jobs.
We&amp;rsquo;ll also briefly go over using Terraform to manage project life cycles and project settings.
All code is a available in a github repository.</description>
    </item>
    
    <item>
      <title>OpenFAAS with TLS via Faasd and Terraform on Openstack</title>
      <link>/posts/openfaas-openstack/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/openfaas-openstack/</guid>
      <description>Intro OpenFAAS is a serverless tool. One of the things I like most about it - it&amp;rsquo;s pretty agnostic. You can bring your own infra or orchestrator and roll with Dockerfiles (as long as they conform to the OpenFaas serverless workload definition). No vendor lock in!
Their tagline: OpenFaaSÂ® makes it simple to deploy both functions and existing code to Kubernetes
While OpenFaas is mainly used with k8s, there are other providers available too.</description>
    </item>
    
  </channel>
</rss>
