<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to my site</title>
    <link>/</link>
    <description>Recent content on Welcome to my site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tools of The Trade :: Git</title>
      <link>/posts/tools-of-the-trade/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/tools-of-the-trade/</guid>
      <description>Introduction This is the first in a series of posts about tools and processes which make my life as a engineer better. In this first post we&amp;rsquo;ll take a look at Git.
Git is a wonderful tool. For teams working together (and individuals!) on source code, git is the go to for distributed version control software.
 It&amp;rsquo;s assumed here that the reader already has a working knowledge of Git. This post focuses on tooling to be used on top of Git</description>
    </item>
    
    <item>
      <title>Free Functions as a service</title>
      <link>/posts/free-functions/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/free-functions/</guid>
      <description>Intro Five minutes (almost!) to always free functions as a service courtesy of Oracle Cloud The full source code for this project is here.
Why do this? All the major cloud providers offer some level of free service, however Oracle cloud is the only one offering this much compute free forever.
Yeah but why Oracle? Okay you got me. I got sucked into their free tier. Plus I like the way they describe instances sizes/flavours as shapes.</description>
    </item>
    
    <item>
      <title>Reusing Old Smart bulbs</title>
      <link>/posts/diy-smart-lights/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/diy-smart-lights/</guid>
      <description>Intro Around five years ago I purchased some smart light bulbs. They are designed to be used with a smart hub, on of these. Turns out that the company behind this has made a new version of the hub, the miboxer, which is not backwards compatible with the older bulbs. It also requires an android account with rather dubious permission requirements to use.
I&amp;rsquo;m not a fan of this kind of behaviour from companies and would rather reuse things where possible.</description>
    </item>
    
    <item>
      <title>LXC, Proxmox and Terraform</title>
      <link>/posts/proxmox-terraform/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/proxmox-terraform/</guid>
      <description>Quick post with an example of using Terraform to create LXC containers on Proxmox.
There are a few proxmox providers out there in the wilds, I chose to use the one by telmate:
terraform { required_providers { proxmox = { source = &amp;#34;Telmate/proxmox&amp;#34; version = &amp;#34;2.6.5&amp;#34; } } } Creating LXC Containers The Docs for this suck, here is a working snippet for version 2.6.5 of the provider:
resource &amp;#34;proxmox_lxc&amp;#34; &amp;#34;lxc-test&amp;#34; { hostname = &amp;#34;terraform-new-container&amp;#34; cores = 1 memory = &amp;#34;1024&amp;#34; swap = &amp;#34;2048&amp;#34; features { nesting = true } rootfs { storage = &amp;#34;local-lvm&amp;#34; size = &amp;#34;8G&amp;#34; } network { name = &amp;#34;eth0&amp;#34; bridge = &amp;#34;vmbr0&amp;#34; ip = &amp;#34;dhcp&amp;#34; ip6 = &amp;#34;dhcp&amp;#34; } ostemplate = &amp;#34;local:vztmpl/ubuntu-20.</description>
    </item>
    
    <item>
      <title>Rundeck and Terraform</title>
      <link>/posts/rundeck-api/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/rundeck-api/</guid>
      <description>Intro Rundeck is an opensource project; it allows you to turn scripts and playbooks into self service jobs. It has a full featured API but there isn&amp;rsquo;t much online about using it. This post will provide a few examples of using it to interact with Rundeck projects, their settings and jobs.
We&amp;rsquo;ll also briefly go over using Terraform to manage project life cycles and project settings.
All code is a available in a github repository.</description>
    </item>
    
    <item>
      <title>Two minute Fudge!</title>
      <link>/posts/two-minute-fudge/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/two-minute-fudge/</guid>
      <description>Intro I love fudge. There. I said it. Sometimes I like to reward myself with a little bit after work. Today I did exactly that, except that when I arrived at the kitchen I didn&amp;rsquo;t have any.
 Zut alors!
 No fear. We can make some! And the best bit? It doesn&amp;rsquo;t involve any scalding hot saucepans full of sugar. This fudge only requires two minutes in the microwave and an hour in the fridge1.</description>
    </item>
    
    <item>
      <title>OpenFAAS with TLS via Faasd and Terraform on Openstack</title>
      <link>/posts/openfaas-openstack/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/openfaas-openstack/</guid>
      <description>Intro OpenFAAS is a serverless tool. One of the things I like most about it - it&amp;rsquo;s pretty agnostic. You can bring your own infra or orchestrator and roll with Dockerfiles (as long as they conform to the OpenFaas serverless workload definition). No vendor lock in!
Their tagline: OpenFaaS® makes it simple to deploy both functions and existing code to Kubernetes
While OpenFaas is mainly used with k8s, there are other providers available too.</description>
    </item>
    
    <item>
      <title>Inlets on the water</title>
      <link>/posts/smart-boat/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/smart-boat/</guid>
      <description>Introduction Before we dive into the technical aspect of this blog post there should probably be some explanation for how we got here.
Like many of us, I&amp;rsquo;ve at times struggled with the balance of remote work, lockdown and my personal life. I&amp;rsquo;ve done all the usual stuff - bread baking, home IOT setup, and a lot of cycling but there was another itch which required scratching.
Meet Ionic. She&amp;rsquo;s a 17 metre narrow boat, laid down in 1986.</description>
    </item>
    
    <item>
      <title>k3s, Ubuntu 19.10 and a Pi4</title>
      <link>/posts/ubuntu-pi4-k3s/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/ubuntu-pi4-k3s/</guid>
      <description>On the matter of Operating Systems Raspian is perfectly good, but there are a few niggles. It isn&amp;rsquo;t 64 bit, so running things like mongodb is a problem. Also, it&amp;rsquo;d be nice to use cloud-init to preconfigure some stuff, such as SSH keys. If you want to try a 64 bit OS for your Pi4, Ubuntu is a solid option.
cgroup_memory = 0 cgroup_memory is disabled by default on raspbian and is required for k8s.</description>
    </item>
    
    <item>
      <title>OpenFAAS via Containerd on a Raspberry PI 4</title>
      <link>/posts/pi4-containerd-openfaas/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/pi4-containerd-openfaas/</guid>
      <description>Intro OpenFAAS is a serverless tool. One of the things I like most about it - it&amp;rsquo;s pretty agnostic. You can bring your own infra or orchestrator and roll with Dockerfiles. No vendor lock in!
Their tagline: OpenFaaS® makes it simple to deploy both functions and existing code to Kubernetes
While it is mainly used with k8s, there are also providers for other orchestrators, such as Hashicorp&amp;rsquo;s Nomad. Today I&amp;rsquo;ll be trying out a new provider for Containerd on my Raspberry Pi 4b.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sun, 15 Dec 2019 11:18:12 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>I&amp;rsquo;m Mark Sharpley, a platform engineer for AstraZeneca.
All views here are my own.
Talk to me about:
 GCP, AWS, Openstack Orchestration: Terraform, K8s, Nomad CfgMgt: Ansible CNCF tooling  </description>
    </item>
    
    <item>
      <title>New Hugo Site</title>
      <link>/posts/home/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/home/</guid>
      <description>First post on the new site. It&amp;rsquo;s a hugo site, using the terminal theme by panr. Previously Pelican was my static site generator of choice but I&amp;rsquo;ve heard good things about Hugo and fancied giving it a go.
Here&amp;rsquo;s how its configured:
Installation I&amp;rsquo;m using Hugo with Github Pages) and my own hosting.
As I won&amp;rsquo;t be using Hugo/this blog everyday I will forget the commands for it so I&amp;rsquo;ve wrapped everything I need into a Makefile:</description>
    </item>
    
  </channel>
</rss>
